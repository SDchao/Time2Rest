<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAMMOAADDDgAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAlakAAJC/NwCRvDE+hdlm8HnSJP92zAD/dswA/3bMAP12zAD3dswA63bM
        ANZ2zAC1dswAh3bMAFF2zAAfdswAA3bMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACVqgAAm5EAA5OxFJeK3Ib/hOWQ/3zWO/92zQT/dswA/3bM
        AP92zAD/dswA/3bMAP92zAD/dswA9nbMANh2zACbdswASHbMAAx2zAAAdswAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJWqAACVqQAzlK8N54rchv+H6an/huef/3/b
        Wf93zgz/dswA/3bMAP92zAD/dswA/3bMAP92zAD/dswA/3bMAP92zAD1dswAt3bMAEh2zAAFdswAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACVqgAAlaoAApWqAJGUrgz/it2H/4fp
        p/+H6Kb/h+il/4Lfcv940Bj/dswA/3bMAP92zAD/dswA/3bMAP92zAD/dswA/3bMAP92zAD/dswA8HbM
        AIx2zAAVdswAAHbLAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJWqAACVqgAulaoA5JSu
        DP+K3Yf/h+mn/4fopf+H6KX/h+in/4TihP960iX/dswA/3bMAP92zAD/dswA/3bMAP92zAD/dswA/3bM
        AP92zAD/dswA/nbMALN2zAAhdswAAHbMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACVqgAAlaoAAJWq
        AIuVqgD/lK4M/4rdh/+H6af/h+il/4fopf+H6KX/h+in/4Xkj/971DH/dswA/3bMAP92zAD/dswA/3bM
        AP92zAD/dswA/3bMAP92zAD/dswA/3bMALh2zAAbdswAAHXLAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJWq
        AACVqgAplaoA4JWqAP+Urgz/it2H/4fpp/+H6KX/h+il/4fopf+H6KX/h+in/4Xllv981jn/dswB/3bM
        AP92zAD/dswA/3bMAP92zAD/dswA/3bMAP92zAD/dswA/3bMAJx2zAAJdswAAAAAAAAAAAAAAAAAAAAA
        AACVqgAAlaoAAJWqAIOVqgD/laoA/5SuDP+K3Yf/h+mn/4fopf+H6KX/h+il/4fopf+H6KX/h+in/4bm
        mf981z7/dswB/3bMAP92zAD/dswA/3bMAP92zAD/dswA/3bMAP92zAD/dswA93bMAF92zAAAdswAAAAA
        AAAAAAAAAAAAAJWqAACVqgAblaoA1ZWqAP+VqgD/lK4L/4rchv+H6af/h+il/4fopf+H6KX/h+il/4fo
        pf+H6KX/h+im/4bmm/981z//dswB/3bMAP92zAD/dswA/3bMAP92zAD/dswA/3bMAP92zAD/dswAzXbM
        ABp2zAAAAAAAAAAAAAAAAAAAlaoAAJWqAFOVqgD6laoA/5WqAP+UrQj/itqA/4fpp/+H6KX/h+il/4fo
        pf+H6KX/h+il/4fopf+H6KX/h+im/4bmmv981jv/dswA/3bMAP92zAD/dswA/3bMAP92zAD/dswA/3bM
        AP92zAD9dswAaHbMAAB2zAAAAAAAAJWqAACVqgAAlaoAi5WqAP+VqgD/laoA/5WrA/+L1HH/h+mo/4fo
        pf+H6KX/h+il/4fopf+H6KX/h+il/4fopf+H6KX/h+im/4bll/971TP/dswA/3bMAP92zAD/dswA/3bM
        AP92zAD/dswA/3bMAP92zAC6dswACnbMAAAAAAAAlaoAAJWqAAWVqgCxlaoA/5WqAP+VqgD/lakA/47K
        VP+H6af/h+il/4fopf+H6KX/h+il/4fopf+H6KX/h+il/4fopf+H6KX/h+in/4Xlkf960yj/dswA/3bM
        AP92zAD/dswA/3bMAP92zAD/dswA/3bMAOt2zAAwdswAAAAAAACVqgAAlaoADJWqAMWVqgD/laoA/5Wq
        AP+VqQD/kbsu/4jmn/+H6KX/h+il/4fopf+H6KX/h+il/4fopf+H6KX/h+il/4fopf+H6KX/h+in/4Tj
        hv950Br/dswA/3bMAP92zAD/dswA/3bMAP92zAD/dswA/nbMAGB2zAAAdc4AAJWqAACVqgAOlaoAyZWq
        AP+VqgD/laoA/5WqAP+Urgz/itqB/4fpp/+H6KX/h+il/4fopf+H6KX/h+il/4fopf+H6KX/h+il/4fo
        pf+H6KX/h+in/4LgdP93zg3/dswA/3bMAP92zAD/dswA/3bMAP92zAD/dswAjHbMAAB2zAAAlaoAAJWq
        AAqVqgDAlaoA/5WqAP+VqgD/laoA/5WpAP+Pw0P/h+ik/4fopf+H6KX/h+il/4fopf+H6KX/h+il/4fo
        pf+H6KX/h+il/4fopf+H6KX/h+il/3/bW/92zQT/dswA/3bMAP92zAD/dswA/3bMAP92zACsdswAA3bM
        AACVqgAAlaoAApWqAKaVqgD/laoA/5WqAP+VqgD/laoA/5SuDP+L2Hn/h+mn/4fopf+H6KX/h+il/4fo
        pf+H6KX/h+il/4fopf+H6KX/h+il/4fopf+H6Kb/huef/3zWPP92zAD/dswA/3bMAP92zAD/dswA/3bM
        AL92zAAJdswAAJWqAACVqgAAlaoAeZWqAP+VqgD/laoA/5WqAP+VqgD/lakA/5K4Jf+J4ZL/h+mn/4fo
        pf+H6KX/h+il/4fopf+H6KX/h+il/4fopf+H6KX/h+il/4fopf+H6Kf/hOSO/3nRHf92zAD/dswA/3bM
        AP92zAD/dswAyHbMAA12zAAAAAAAAJWqAACVqgA+laoA8pWqAP+VqgD/laoA/5WqAP+VqgD/laoA/5C/
        N/+I45j/h+mn/4fopf+H6KX/h+il/4fopf+H6KX/h+il/4fopf+H6KX/h+il/4fopf+H6Kf/gd5u/3fN
        B/92zAD/dswA/3bMAP92zADKdswADnbMAAAAAAAAlaoAAJWqAA6VqgC+laoA/5WqAP+VqgD/laoA/5Wq
        AP+VqgD/laoB/5C+Nf+J4I//h+mo/4fopf+H6KX/h+il/4fopf+H6KX/h+il/4fopf+H6KX/h+il/4fo
        pf+H56L/fddB/3bMAP92zAD/dswA/3bMAMR2zAALdswAAAAAAACVqgAAlaoAAJWqAF+VqgD5laoA/5Wq
        AP+VqgD/laoA/5WqAP+VqgD/lakA/5K2IP+L1HH/h+ah/4fpqP+H6Kb/h+il/4fopf+H6KX/h+il/4fo
        pf+H6KX/h+il/4fop/+E44v/eNAX/3bMAP92zAD/dswAtnbMAAZ2zAAAAAAAAAAAAACVqgAAlaoADpWq
        ALOVqgD/laoA/5WqAP+VqgD/laoA/5WqAP+VqgD/lakA/5StCP+Qvzf/i9Vz/4jjmP+H6KX/h+mo/4fp
        p/+H6KX/h+il/4fopf+H6KX/h+il/4fopv9/21v/dswB/3bMAP92zACfdswAAHbMAAAAAAAAAAAAAJWq
        AACVqgAAlaoAM5WqANyVqgD/laoA/5WqAP+VqgD/laoA/5WqAP+VqgD/laoA/5WpAP+VrAb/krUe/4/C
        Qf+M0Gb/it2H/4jlnf+H6KX/h+il/4fopf+H6KX/h+im/4Xllv960iL/dswA/3bMAH92zAAAdswAAAAA
        AAAAAAAAAAAAAJWqAACVqgAAlaoATZWqAOWVqgD/laoA/5WqAP+VqgD/laoA/5WqAP+VqgD/laoA/5Wq
        AP+VqQD/lakA/5WqAf+Urw3/krko94rZfKGH6ae3h+il6ofopf6H6KX/h+in/4DdZP92zAL9dswAWHbM
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAJWqAACVqgAAlaoAS5WqANqVqgD/laoA/5WqAP+VqgD/laoA/5Wq
        AP+VqgD/laoA/5WqAP+VqgD/laoA/5WqAP+VqQDRlqcAF4T0xQiH6KUuh+ilcIfopbmH6KbuheaX/3rS
        Je51ygAzdswAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJWqAACVqgAAlaoANZWqAMeVqgD/laoA/5Wq
        AP+VqgD/laoA/5WqAP+VqgD/laoA/5WqAP+VqgD/laoA/5WqAIGVqgAAlaoAAIfopQCH6KUAh+ilCofo
        pTeH6KaHgN1iqnbLABZ3zQgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJWqAACVqgAAlaoAI5Wq
        ALOVqgD+laoA/5WqAP+VqgD/laoA/5WqAP+VqgD/laoA/5WqAP+VqgDhlaoAKpWqAAAAAAAAAAAAAAAA
        AAAAAAAAiOmqAInsuwGF5JANftpUAnzXQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJWq
        AACVqgAAlaoAGJWqAKKVqgD9laoA/5WqAP+VqgD/laoA/5WqAP+VqgD/laoA/5WqAIWVqgAAlaoAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAJaqAACVqgAAlaoAEZWqAJeVqgD7laoA/5WqAP+VqgD/laoA/5WqAP+VqgDSlaoAIJWq
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACVqgAAlaoADpWqAJGVqgD7laoA/5WqAP+VqgD/laoA9ZWq
        AFyVqgAAlaoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACVqgAAlaoADJWqAJGVqgD8laoA/5Wq
        AP+VqgCXlaoAB5WqAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACVqgAAlaoADpWq
        AJeVqgD/laoAw5WqAByVqgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AACVqgAAlaoAFpWqAKKVqgBGlaoAAJWqAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA/AAP//gAA//4AAD/8AAAf/AAAD/wAAAf4AAAD+AAAA/AAAAHwAAAB8AA
        AAOAAAADgAAAA4AAAAOAAAABgAAAAcAAAAHAAAABwAAAAeAAAAHgAAAD8AAAA/gAAAP8AAAD/gAHg/8A
        B+P/gA///8AP///gH///8B////g////8f/8=
</value>
  </data>
</root>